# TODO
# TODO: PX_FORCE_INLINE (PX_VC or PX_LINUX?)
# TODO: Does applied2 use FastXML?
# TODO: build shared libraries with CMake and inspect link dependencies.

# File paths come from physx/source/compiler/cmake/linux.

cc_library(
    name = "PhysX",
    srcs = glob([
        "physx/source/common/src/*.cpp",
        "physx/source/foundation/src/*.cpp",
        "physx/source/foundation/src/unix/*.cpp",
        "physx/source/fastxml/src/*.cpp",
        "physx/source/foundation/src/unix/*.cpp",
        "physx/source/geomutils/src/*.cpp",
        "physx/source/geomutils/src/ccd/*.cpp",
        "physx/source/geomutils/src/common/*.cpp",
        "physx/source/geomutils/src/contact/*.cpp",
        "physx/source/geomutils/src/convex/*.cpp",
        "physx/source/geomutils/src/distance/*.cpp",
        "physx/source/geomutils/src/gjk/*.cpp",
        "physx/source/geomutils/src/hf/*.cpp",
        "physx/source/geomutils/src/intersection/*.cpp",
        "physx/source/geomutils/src/mesh/*.cpp",
        "physx/source/geomutils/src/pcm/*.cpp",
        "physx/source/geomutils/src/sweep/*.cpp",
        "physx/source/immediatemode/src/*.cpp",
        "physx/source/lowlevel/api/src/*.cpp",
        "physx/source/lowlevel/common/src/collision/*.cpp",
        "physx/source/lowlevel/common/src/pipeline/*.cpp",
        "physx/source/lowlevel/software/src/*.cpp",
        "physx/source/lowleveldynamics/src/*.cpp",
        "physx/source/physx/src/*.cpp",
        "physx/source/physx/src/buffering/*.cpp",
        "physx/source/physxmetadata/core/src/*.cpp",
        "physx/source/physxvehicle/src/*.cpp",
        "physx/source/physxvehicle/src/physxmetadata/src/*.cpp",
        "physx/source/simulationcontroller/src/*.cpp",
        "physx/source/task/src/*.cpp",
        "physx/source/physxcooking/src/*.cpp",
        "physx/source/physxcooking/src/convex/*.cpp",
        "physx/source/physxcooking/src/mesh/*.cpp",
        "physx/source/physxextensions/src/*.cpp",
        "physx/source/scenequery/src/*.cpp",
        "physx/source/lowlevelaabb/src/*.cpp",
        "physx/source/physxmetadata/extensions/src/*.cpp",
        "physx/source/pvd/src/*.cpp",
        "physx/source/physxextensions/src/serialization/Xml/*.cpp",
        "physx/source/physxextensions/src/serialization/Binary/*.cpp",
        "physx/source/physxextensions/src/serialization/*.cpp",
    ]),
    hdrs = glob([
        "physx/source/physx/src/device/*.h",
        "physx/source/lowlevel/software/include/*.h",
        "physx/source/lowlevel/common/include/collision/*.h",
        "physx/source/lowlevel/api/include/*.h",
        "physx/source/lowlevel/common/include/pipeline/*.h",
        "physx/source/lowlevel/common/include/utils/*.h",
        "physx/source/lowleveldynamics/src/*.h",
        "physx/source/lowleveldynamics/include/*.h",
        "physx/source/simulationcontroller/include/*.h",
        "physx/source/simulationcontroller/src/*.h",
        "physx/include/*.h",
        "physx/source/physx/src/*.h",
        "physx/source/physx/src/buffering/*.h",
        "physx/source/physxmetadata/core/include/*.h",
        "physx/include/vehicle/*.h",
        "physx/source/physxvehicle/src/*.h",
        "physx/source/physxvehicle/src/physxmetadata/include/*.h",
        "pxshared/include/foundation/*.h",
        "pxshared/include/foundation/unix/*.h",
        "physx/include/*.h",
        "physx/source/foundation/include/*.h",
        "physx/source/foundation/include/unix/*.h",
        "physx/source/foundation/include/unix/neon/*.h",
        "physx/source/foundation/include/unix/sse2/*.h",
        "physx/include/task/*.h",
        "physx/include/gpu/*.h",
        "physx/include/task/*.h",
        "physx/include/collision/*.h",
        "physx/include/common/*.h",
        "physx/include/geometry/*.h",
        "physx/include/geomutils/*.h",
        "physx/source/common/src/*.h",
        "physx/source/geomutils/include/*.h",
        "physx/source/geomutils/src/*.h",
        "physx/source/geomutils/src/ccd/*.h",
        "physx/source/geomutils/src/common/*.h",
        "physx/source/geomutils/src/contact/*.h",
        "physx/source/geomutils/src/convex/*.h",
        "physx/source/geomutils/src/distance/*.h",
        "physx/source/geomutils/src/gjk/*.h",
        "physx/source/geomutils/src/hf/*.h",
        "physx/source/geomutils/src/intersection/*.h",
        "physx/source/geomutils/src/mesh/*.h",
        "physx/source/geomutils/src/pcm/*.h",
        "physx/source/geomutils/src/sweep/*.h",
        "physx/source/physxgpu/include/*.h",
        "physx/source/fastxml/include/*.h",
        "physx/source/physxextensions/src/serialization/File/*.h",
        "physx/source/scenequery/include/*.h",
        "physx/source/scenequery/src/*.h",
        "physx/source/lowlevelaabb/include/*.h",
        "physx/source/lowlevelaabb/src/*.h",
        "physx/include/characterkinematic/*.h",
        "physx/include/cooking/*.h",
        "physx/source/physxcooking/src/*.h",
        "physx/source/physxcooking/src/mesh/*.h",
        "physx/source/physxcooking/src/convex/*.h",
        "physx/include/filebuf/*.h",
        "physx/include/extensions/*.h",
        "physx/source/physxmetadata/extensions/include/*.h",
        "physx/source/physxextensions/src/serialization/Xml/*.h",
        "physx/source/physxextensions/src/serialization/Binary/*.h",
        "physx/source/physxextensions/src/serialization/*.h",
        "physx/source/filebuf/include/*.h",
        "physx/source/physxextensions/src/*.h",
        "physx/source/pvd/include/*.h",
        "physx/include/pvd/*.h",
        "physx/include/solver/*.h",
        "physx/source/pvd/src/*.h",
    ]),
    # Dependencies of this target will inherit these defines.
    # TODO(dembia): Which of these could be local_defines?
    defines = [
        "PX_BUILD_NUMBER=0",
        # "PX_DEBUG=1", # TODO
        "PX_CHECKED=1",  # TODO, use optimized.
        "PX_NVTX=0",  # TODO what is this?
        "PX_PHYSX_STATIC_LIB",
        # PX_COOKING avoids `#error Do not include anymore!` from MeshCleaner.h.
        # CMake also sets the PX_COOKING macro (PhysXCooking.cmake).
        "PX_COOKING",
        # PVD: PhysX Visual Debugger (visualizer).
        "PX_SUPPORT_PVD=1",
        "NDEBUG",
        # Disable support for CUDA; we don't need this yet.
        # See pxshared/include/foundation/PxPreprocessor.h.
        "DISABLE_CUDA_PHYSX",
    ],
    includes = [
        "physx/include",
        "physx/include/common",
        "physx/include/cooking",
        "physx/include/extensions",
        "physx/include/geometry",
        "physx/include/geomutils",
        "physx/include/pvd",
        "physx/include/vehicle",
        "physx/source",
        "physx/source/common/include",
        "physx/source/common/src",
        "physx/source/common/src/linux",
        "physx/source/fastxml/include",
        "physx/source/filebuf",
        "physx/source/filebuf/include",
        "physx/source/foundation/include",
        "physx/source/geomutils/include",
        "physx/source/geomutils/src",
        "physx/source/geomutils/src/ccd",
        "physx/source/geomutils/src/common",
        "physx/source/geomutils/src/contact",
        "physx/source/geomutils/src/convex",
        "physx/source/geomutils/src/distance",
        "physx/source/geomutils/src/gjk",
        "physx/source/geomutils/src/hf",
        "physx/source/geomutils/src/intersection",
        "physx/source/geomutils/src/mesh",
        "physx/source/geomutils/src/pcm",
        "physx/source/geomutils/src/sweep",
        "physx/source/lowlevel/api/include",
        "physx/source/lowlevel/common/include",
        "physx/source/lowlevel/common/include/collision",
        "physx/source/lowlevel/common/include/pipeline",
        "physx/source/lowlevel/common/include/utils",
        "physx/source/lowlevel/software/include",
        "physx/source/lowlevelaabb/include",
        "physx/source/lowleveldynamics/include/",
        "physx/source/physx/src",
        "physx/source/physx/src/buffering",
        "physx/source/physxcooking/src",
        "physx/source/physxcooking/src/convex",
        "physx/source/physxcooking/src/mesh",
        "physx/source/physxextensions/src",
        "physx/source/physxextensions/src/serialization/Binary",
        "physx/source/physxextensions/src/serialization/File",
        "physx/source/physxextensions/src/serialization/Xml",
        "physx/source/physxgpu/include",
        "physx/source/physxmetadata/core/include",
        "physx/source/physxmetadata/extensions/include",
        "physx/source/physxvehicle/src",
        "physx/source/physxvehicle/src/physxmetadata/include",
        "physx/source/pvd/include",
        "physx/source/scenequery/include",
        "physx/source/simulationcontroller/include",
        "physx/source/simulationcontroller/src",
        "pxshared/include",
    ],
    linkopts = [
        "-pthread",
        # OpenGL, GLU, and GLUT are required only for visualization.
        "-lGL",
        "-lGLU",
        "-lglut",
    ],
)

cc_binary(
    name = "testing",
    srcs = [":testing.cc"],
    defines = [
        "PX_BUILD_NUMBER=0",
        "PX_CHECKED=1",  # TODO, use optimized.
        "PX_NVTX=0",  # TODO what is this?
        "PX_PHYSX_STATIC_LIB",
        "PX_SUPPORT_PVD=0",
        "NDEBUG",
    ],
    deps = [
        ":PhysX",
    ],
)

cc_binary(
    name = "SnippetVehicle4W",
    srcs = [
        "physx/snippets/snippetvehicle4w/SnippetVehicle4W.cpp",
        "physx/snippets/snippetvehicle4w/SnippetVehicle4WRender.cpp",
    ] + glob([
        "physx/snippets/snippetvehiclecommon/*.cpp",
        "physx/snippets/snippetcommon/*.cpp",
        "physx/snippets/snippetutils/*.cpp",
        "physx/snippets/snippetvehiclecommon/*.h",
        "physx/snippets/snippetcommon/*.h",
        "physx/snippets/snippetutils/*.h",
        "physx/snippets/snippetrender/*.h",
        "physx/snippets/snippetrender/*.cpp",
    ]),
    defines = [
        "RENDER_SNIPPET",
    ],
    deps = [
        ":PhysX",
    ],
)
